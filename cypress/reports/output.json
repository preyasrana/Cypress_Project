{
  "stats": {
    "suites": 28,
    "tests": 89,
    "passes": 87,
    "pending": 0,
    "failures": 2,
    "start": "2022-07-14T11:34:44.259Z",
    "end": "2022-07-14T12:25:11.407Z",
    "duration": 191209,
    "testsRegistered": 89,
    "passPercent": 97.75280898876404,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f5321039-9627-45ac-8396-9165800f6e84",
      "title": "",
      "fullFile": "cypress/e2e/Cypress-framework/cy_framework1.js",
      "file": "cypress/e2e/Cypress-framework/cy_framework1.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cd211b30-4ad9-47e3-98d6-d2f980bc7f5b",
          "title": "test suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "first test case",
              "fullTitle": "test suite first test case",
              "timedOut": null,
              "duration": 4925,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('weburl') + \"/angularpractice/\");\n_Homepage.default.fillname().type(this.data.name);\n_Homepage.default.selectgender().select(this.data.gender);\n_Homepage.default.databinding().should('have.value', this.data.name); //attribute for validation\n\n_Homepage.default.fillname().should('have.attr', 'minlength', '2');\n_Homepage.default.employee_status_Entrepreneur().should('be.disabled');\n_Homepage.default.shoplink().click().debug(); //cy.pause()\n//Parameterized test with multiple data\n\nthis.data.productName.forEach(function (element) {\n  //reusabled *** select product method\n  cy.selectproduct(element);\n});\n_Productpage.default.btn_shoppingcheckout().click();\nvar sum = 0;\n_Productpage.default.cartproduct_totalprice().each(($el, index, $list) => {\n  const price = $el.text();\n  var res = price.split(\" \");\n  res = res[1].trim();\n  cy.log(res);\n  sum = Number(sum) + Number(res);\n}).then(function () {\n  cy.log(sum);\n});\n_Productpage.default.carttotal().then(function (totalprice) {\n  const total_price = totalprice.text();\n  var total = total_price.split(\" \");\n  var total = total[1].trim();\n  cy.log(total);\n  expect(Number(total)).to.equal(Number(sum));\n});\n_Productpage.default.btncheckout().click();\n_Productpage.default.fillcountry().type(\"India\");\n_Productpage.default.checkbox_terms().check({\n  force: true\n});\n_Productpage.default.purchased_order().click();\n_Productpage.default.success_message().then(function (element) {\n  cy.log(element.text());\n  const actualtext = element.text();\n  expect(actualtext.includes(\"Success! Thank you! Your order will be delivered in next few weeks\")).to.be.true;\n});",
              "err": {},
              "uuid": "a4f83e11-ee26-4020-8a13-73a10eb3d249",
              "parentUUID": "cd211b30-4ad9-47e3-98d6-d2f980bc7f5b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4f83e11-ee26-4020-8a13-73a10eb3d249"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4925,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "78cfe807-204e-462b-b88e-e31e500ee785",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.spec.js",
      "file": "cypress/e2e/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7ca593d9-718c-4b52-8e76-101a0b6818af",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1788,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "6f105849-a9eb-4c6b-b604-0b8bab9baf93",
              "parentUUID": "7ca593d9-718c-4b52-8e76-101a0b6818af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 728,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "c4b7feac-cc59-4a22-846a-dba7d0203b3d",
              "parentUUID": "7ca593d9-718c-4b52-8e76-101a0b6818af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 665,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "e11ac28d-7669-4f20-a723-6904de85c286",
              "parentUUID": "7ca593d9-718c-4b52-8e76-101a0b6818af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7dfb94d1-aece-465b-9e30-9588e02b25ee",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 678,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "20f64059-6a96-4b29-9f23-b37b9826309f",
                  "parentUUID": "7dfb94d1-aece-465b-9e30-9588e02b25ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 621,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "633dedc9-06c7-4cda-ac82-02ea073ffd7d",
                  "parentUUID": "7dfb94d1-aece-465b-9e30-9588e02b25ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 589,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "38369d2a-ca80-4b0d-9ea9-740e3b83703f",
                  "parentUUID": "7dfb94d1-aece-465b-9e30-9588e02b25ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20f64059-6a96-4b29-9f23-b37b9826309f",
                "633dedc9-06c7-4cda-ac82-02ea073ffd7d",
                "38369d2a-ca80-4b0d-9ea9-740e3b83703f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1888,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "6f105849-a9eb-4c6b-b604-0b8bab9baf93",
            "c4b7feac-cc59-4a22-846a-dba7d0203b3d",
            "e11ac28d-7669-4f20-a723-6904de85c286"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3181,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "894ec797-4530-4ccb-a56d-1b9b0e33072e",
      "title": "",
      "fullFile": "cypress/e2e/API_Testing/Get_API.js",
      "file": "cypress/e2e/API_Testing/Get_API.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "644181b1-9d36-4424-aae6-70cb1f9b8406",
          "title": "API Testing App",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Users",
              "fullTitle": "API Testing App Get Users",
              "timedOut": null,
              "duration": 765,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'https://gorest.co.in/public-api/users/2',\n  headers: {\n    'authorization': \"Bearer\" + accesstoken\n  }\n}).then(resp => {\n  expect(resp.status).equal(200);\n  expect(resp.body.data.name).to.eq('Rajinder Dwivedi');\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Rajinder Dwivedi'",
                "estack": "AssertionError: expected undefined to equal 'Rajinder Dwivedi'\n    at Context.eval (https://reqres.in/__cypress/tests?p=cypress/e2e/API_Testing/Get_API.js:110:38)",
                "diff": null
              },
              "uuid": "8c8e7ce3-71ba-4eb9-a450-6becdfa31ffd",
              "parentUUID": "644181b1-9d36-4424-aae6-70cb1f9b8406",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8c8e7ce3-71ba-4eb9-a450-6becdfa31ffd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 765,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5ff706f8-76ee-49c7-8843-24c8acfeb8b8",
      "title": "",
      "fullFile": "cypress/e2e/API_Testing/aliasapi.js",
      "file": "cypress/e2e/API_Testing/aliasapi.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9e63babb-64a6-478d-9cfc-862c9909f236",
          "title": "API Testing using Alias",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get API Test",
              "fullTitle": "API Testing using Alias Get API Test",
              "timedOut": null,
              "duration": 149,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@users').its('headers').its('content-type').should('include', 'application/json; charset=utf-8');",
              "err": {},
              "uuid": "86e9d8c1-d857-42b2-90f9-c5bba2224bf4",
              "parentUUID": "9e63babb-64a6-478d-9cfc-862c9909f236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Status Code",
              "fullTitle": "API Testing using Alias Verify Status Code",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@users').its('status').should('equal', 200);",
              "err": {},
              "uuid": "87ca47c1-7c4f-41f1-a441-05bbc0d15460",
              "parentUUID": "9e63babb-64a6-478d-9cfc-862c9909f236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify body contains",
              "fullTitle": "API Testing using Alias Verify body contains",
              "timedOut": null,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@users').its('body').should('contains', {\n  'total_pages': 2\n});",
              "err": {},
              "uuid": "6db9f5d2-30e8-4b66-936a-d2423b419fdb",
              "parentUUID": "9e63babb-64a6-478d-9cfc-862c9909f236",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate user info in data json array",
              "fullTitle": "API Testing using Alias Validate user info in data json array",
              "timedOut": null,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@users').its('body').then(resp => {\n  //expect(resp.status).equal(200)\n  expect(resp.data[0]).has.property('id', 7);\n  expect(resp.data[0]).has.property('email', 'michael.lawson@reqres.in');\n  expect(resp.data[0]).has.property('first_name', 'Michael');\n  expect(resp.data[0]).has.property('last_name', 'Lawson');\n  expect(resp.data[0]).has.property('avatar', 'https://reqres.in/img/faces/7-image.jpg');\n});",
              "err": {},
              "uuid": "6d1d996e-27d8-4c9b-acb5-a2f63cc498f7",
              "parentUUID": "9e63babb-64a6-478d-9cfc-862c9909f236",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86e9d8c1-d857-42b2-90f9-c5bba2224bf4",
            "87ca47c1-7c4f-41f1-a441-05bbc0d15460",
            "6db9f5d2-30e8-4b66-936a-d2423b419fdb",
            "6d1d996e-27d8-4c9b-acb5-a2f63cc498f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 343,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "82a64a21-6986-44f3-8c49-f21e2ede74cf",
      "title": "",
      "fullFile": "cypress/e2e/API_Testing/getapi.js",
      "file": "cypress/e2e/API_Testing/getapi.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c2d1413-eef4-4809-b0ae-c5addb2b40c3",
          "title": "API Testing App",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get API Test",
              "fullTitle": "API Testing App Get API Test",
              "timedOut": null,
              "duration": 7839,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://flask-rest-api-demo.herokuapp.com/product/motorbike').then(resp => {\n  expect(resp.status).equal(200);\n  expect(resp.body.product[0]).has.property('price', 599.99);\n  expect(resp.body.product[0]).has.property('product', 'motorbike');\n});",
              "err": {},
              "uuid": "1744a454-b863-40ba-8b5d-ea6f7a8e1bf1",
              "parentUUID": "6c2d1413-eef4-4809-b0ae-c5addb2b40c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get API Test",
              "fullTitle": "API Testing App Get API Test",
              "timedOut": null,
              "duration": 319,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://flask-rest-api-demo.herokuapp.com/users').then(resp => {\n  expect(resp.status).equal(200);\n  expect(resp.body.users[0]).has.property('username', 'test_1');\n  expect(resp.body.users[0]).has.property('password', 'qwert');\n  expect(resp.body.users[1]).has.property('id', 2);\n  expect(resp.body.users).has.length(5);\n  expect(resp.body.users[0]).not.have.property('price');\n});",
              "err": {},
              "uuid": "2b9b7b63-4d89-4fcc-8958-ee3c3f0ef64a",
              "parentUUID": "6c2d1413-eef4-4809-b0ae-c5addb2b40c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Reqres Test",
              "fullTitle": "API Testing App Get Reqres Test",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://reqres.in/api/users?page=2').as('user list api').then(resp => {\n  expect(resp.status).equal(200);\n  expect(resp.body.data[0]).has.property('first_name', 'Michael');\n  expect(resp.body.data[1]).has.property('last_name', 'Ferguson');\n});",
              "err": {},
              "uuid": "8c25a434-3230-4bbf-95d5-d7df36a6653c",
              "parentUUID": "6c2d1413-eef4-4809-b0ae-c5addb2b40c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1744a454-b863-40ba-8b5d-ea6f7a8e1bf1",
            "2b9b7b63-4d89-4fcc-8958-ee3c3f0ef64a",
            "8c25a434-3230-4bbf-95d5-d7df36a6653c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8209,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4b48a974-9b05-41fa-b984-88e0d8c5b874",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.spec.js",
      "file": "cypress/e2e/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "09b2bc04-e0f0-469f-ac50-89d494ffcb04",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1006,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "8c41dab6-334b-4942-928a-5e202cbae97d",
              "parentUUID": "09b2bc04-e0f0-469f-ac50-89d494ffcb04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 926,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "297269fb-dfd1-42e6-9b49-c9f31f1d1ec3",
              "parentUUID": "09b2bc04-e0f0-469f-ac50-89d494ffcb04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 636,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "805d2f84-4f25-4c77-b27a-34588a31b66e",
              "parentUUID": "09b2bc04-e0f0-469f-ac50-89d494ffcb04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5afc6631-9d27-4e7c-a8c4-d6298dabdb50",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 745,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "d8154db6-b051-41b5-bc0a-a4238982ca53",
                  "parentUUID": "5afc6631-9d27-4e7c-a8c4-d6298dabdb50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 667,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "7f83e20a-0400-423a-923f-fd454ad78783",
                  "parentUUID": "5afc6631-9d27-4e7c-a8c4-d6298dabdb50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 553,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "89014a90-82d1-4e73-a40b-ede4ecfb486f",
                  "parentUUID": "5afc6631-9d27-4e7c-a8c4-d6298dabdb50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8154db6-b051-41b5-bc0a-a4238982ca53",
                "7f83e20a-0400-423a-923f-fd454ad78783",
                "89014a90-82d1-4e73-a40b-ede4ecfb486f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1965,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "8c41dab6-334b-4942-928a-5e202cbae97d",
            "297269fb-dfd1-42e6-9b49-c9f31f1d1ec3",
            "805d2f84-4f25-4c77-b27a-34588a31b66e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2568,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9414dd9b-f04a-4088-b6cc-82eceb668029",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/actions.spec.js",
      "file": "cypress/e2e/2-advanced-examples/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 4828,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "d6d499c9-33f4-4985-a149-2f9ef7c462b0",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 560,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "7a4ce384-84bf-488a-9ea9-03ed91044e55",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 876,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "16f91fd8-4011-47e3-bfc2-b4a915840994",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 947,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "5d6364f1-5441-446f-8f6f-ec507e3be86d",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 731,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "350e4fb6-7b68-45b5-99bd-9a05b52db5fe",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 4061,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "f08d41be-b767-40e6-a9d5-d1ed79e3149a",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 536,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "5c99e10b-34c2-4c85-b17b-435be0119c1b",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 508,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "c8f20aef-e0e9-41aa-bc92-95e607189025",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1733,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "ceff7903-1fcb-4ef8-a0f4-08133a893dd1",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1862,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "c20badd9-86b9-4d75-999d-c76642a35d72",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1498,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "74de1b2d-dd4d-4f6e-a86a-3eeace7bc8d8",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 529,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "3f5ea246-cc5d-42c4-b0f7-3006dfc1c78c",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 603,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "7be91b64-23b9-4738-8d04-5d4c1c91ae06",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2442,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "ecf134a3-1ba3-43f2-b594-5d21025869e1",
              "parentUUID": "b4fffc0a-9476-422c-9d10-f4fc3f9342dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6d499c9-33f4-4985-a149-2f9ef7c462b0",
            "7a4ce384-84bf-488a-9ea9-03ed91044e55",
            "16f91fd8-4011-47e3-bfc2-b4a915840994",
            "5d6364f1-5441-446f-8f6f-ec507e3be86d",
            "350e4fb6-7b68-45b5-99bd-9a05b52db5fe",
            "f08d41be-b767-40e6-a9d5-d1ed79e3149a",
            "5c99e10b-34c2-4c85-b17b-435be0119c1b",
            "c8f20aef-e0e9-41aa-bc92-95e607189025",
            "ceff7903-1fcb-4ef8-a0f4-08133a893dd1",
            "c20badd9-86b9-4d75-999d-c76642a35d72",
            "74de1b2d-dd4d-4f6e-a86a-3eeace7bc8d8",
            "3f5ea246-cc5d-42c4-b0f7-3006dfc1c78c",
            "7be91b64-23b9-4738-8d04-5d4c1c91ae06",
            "ecf134a3-1ba3-43f2-b594-5d21025869e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21714,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fb7fa1ca-8937-4ecd-a5e5-88c50e72d5c7",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.spec.js",
      "file": "cypress/e2e/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4dca5f3e-0d9a-4136-8a31-856acf7d5174",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "349ec345-ec56-4410-8a8f-b9a4bb0ece94",
              "parentUUID": "4dca5f3e-0d9a-4136-8a31-856acf7d5174",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 853,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "73926315-4780-4b93-a583-bf31a592d564",
              "parentUUID": "4dca5f3e-0d9a-4136-8a31-856acf7d5174",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 566,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "9543aa6c-aea2-4fc2-b545-50e23ca04e72",
              "parentUUID": "4dca5f3e-0d9a-4136-8a31-856acf7d5174",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5d9bf45a-f265-4baf-9d61-69c86be380ed",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 582,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "fc64faa1-fe6b-4ddb-aca6-90d71efaf00e",
                  "parentUUID": "5d9bf45a-f265-4baf-9d61-69c86be380ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 621,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "b4eacb10-f8ad-43e8-a076-77fa5f91c811",
                  "parentUUID": "5d9bf45a-f265-4baf-9d61-69c86be380ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 637,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "4a8bd84d-1804-4cfe-82ab-5a681235a25e",
                  "parentUUID": "5d9bf45a-f265-4baf-9d61-69c86be380ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc64faa1-fe6b-4ddb-aca6-90d71efaf00e",
                "b4eacb10-f8ad-43e8-a076-77fa5f91c811",
                "4a8bd84d-1804-4cfe-82ab-5a681235a25e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1840,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "349ec345-ec56-4410-8a8f-b9a4bb0ece94",
            "73926315-4780-4b93-a583-bf31a592d564",
            "9543aa6c-aea2-4fc2-b545-50e23ca04e72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2534,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9a47e0f2-d54b-42b1-97b9-e38bf9d9d803",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.spec.js",
      "file": "cypress/e2e/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f1bffb1a-dd5b-45c3-81f6-54c49393fd48",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 979,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "ccd7c13c-e7e5-4362-82dc-f728f56f2daa",
              "parentUUID": "f1bffb1a-dd5b-45c3-81f6-54c49393fd48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 862,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "869b9803-290f-423e-8ca0-4db74e41cd64",
              "parentUUID": "f1bffb1a-dd5b-45c3-81f6-54c49393fd48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 608,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "30fbbeee-bf1a-4288-a254-fe65e61fa1e1",
              "parentUUID": "f1bffb1a-dd5b-45c3-81f6-54c49393fd48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6fa808a2-278a-4222-a97c-26dfbbb135b1",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 689,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "b250725d-83aa-40b4-ad4c-7db55628611b",
                  "parentUUID": "6fa808a2-278a-4222-a97c-26dfbbb135b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 682,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "c4f45aac-4384-471a-b390-73abc3cdf303",
                  "parentUUID": "6fa808a2-278a-4222-a97c-26dfbbb135b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 728,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "97e2f9e8-2427-4091-af8e-216b19b31a0d",
                  "parentUUID": "6fa808a2-278a-4222-a97c-26dfbbb135b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b250725d-83aa-40b4-ad4c-7db55628611b",
                "c4f45aac-4384-471a-b390-73abc3cdf303",
                "97e2f9e8-2427-4091-af8e-216b19b31a0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2099,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "ccd7c13c-e7e5-4362-82dc-f728f56f2daa",
            "869b9803-290f-423e-8ca0-4db74e41cd64",
            "30fbbeee-bf1a-4288-a254-fe65e61fa1e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2449,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "038aa828-45a2-4ebd-ac4d-444fc94aa21d",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/actions.spec.js",
      "file": "cypress/e2e/2-advanced-examples/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 5018,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "c7af07cc-4357-4b0e-b72e-53bdc8e06a18",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 703,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "e7a96464-7483-4158-9e4b-e0ba50a70831",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 900,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "62b94864-1f3e-435c-b757-91f9cac522d8",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 1173,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "9d5a0aac-ca85-4c70-b193-68d523c96a9d",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 767,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "7ec88e05-ec88-4977-ae81-774017398da8",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 4354,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "410fd7a6-b073-40f0-8aeb-0b128fc76294",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 720,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "ae801dca-314c-49e0-96d9-ebc49023cbe8",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 618,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "c8c6d828-592f-4498-834c-66c3458e526b",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 2062,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "00eebe6d-8687-4add-a48f-5cd76a1c71b6",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 2213,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "f2503fb4-78d5-49c4-90b6-e163bbd192fb",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1646,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "e1017615-5d79-44df-baa9-78127524e886",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 500,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "aeb5b5f3-d826-4edd-96a8-6c3f357a3bf5",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 702,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "1c1c2f8e-0801-4924-8453-d195507d64bd",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2406,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "e61730db-0eb3-400e-8e3e-41f7576e9ac1",
              "parentUUID": "93de23b3-84ac-4ff6-92aa-7ee107bd940a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7af07cc-4357-4b0e-b72e-53bdc8e06a18",
            "e7a96464-7483-4158-9e4b-e0ba50a70831",
            "62b94864-1f3e-435c-b757-91f9cac522d8",
            "9d5a0aac-ca85-4c70-b193-68d523c96a9d",
            "7ec88e05-ec88-4977-ae81-774017398da8",
            "410fd7a6-b073-40f0-8aeb-0b128fc76294",
            "ae801dca-314c-49e0-96d9-ebc49023cbe8",
            "c8c6d828-592f-4498-834c-66c3458e526b",
            "00eebe6d-8687-4add-a48f-5cd76a1c71b6",
            "f2503fb4-78d5-49c4-90b6-e163bbd192fb",
            "e1017615-5d79-44df-baa9-78127524e886",
            "aeb5b5f3-d826-4edd-96a8-6c3f357a3bf5",
            "1c1c2f8e-0801-4924-8453-d195507d64bd",
            "e61730db-0eb3-400e-8e3e-41f7576e9ac1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23782,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "644bb62c-d68c-41d8-861c-415f88e7c875",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.spec.js",
      "file": "cypress/e2e/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7af03e7-1bc2-42a3-a592-3f1b8cfb6a2c",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 706,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "7698e00e-b877-45b6-a5f8-7eccb27d5c07",
              "parentUUID": "d7af03e7-1bc2-42a3-a592-3f1b8cfb6a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 756,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "5cbcc0e1-e9e1-4807-bcb5-a92598d358f7",
              "parentUUID": "d7af03e7-1bc2-42a3-a592-3f1b8cfb6a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 416,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "815fbcf7-70ae-41fe-ab2d-9e528e11d610",
              "parentUUID": "d7af03e7-1bc2-42a3-a592-3f1b8cfb6a2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bc275f17-2bfe-4425-8b5f-08ec050bfb59",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 540,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "2c9c78e6-96be-4b20-9900-7f1273906e1c",
                  "parentUUID": "bc275f17-2bfe-4425-8b5f-08ec050bfb59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 565,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "49e0953c-8dfe-4392-a735-25272e792513",
                  "parentUUID": "bc275f17-2bfe-4425-8b5f-08ec050bfb59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 514,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "af1fca89-1803-4459-8bd4-6a809c447255",
                  "parentUUID": "bc275f17-2bfe-4425-8b5f-08ec050bfb59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c9c78e6-96be-4b20-9900-7f1273906e1c",
                "49e0953c-8dfe-4392-a735-25272e792513",
                "af1fca89-1803-4459-8bd4-6a809c447255"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1619,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "7698e00e-b877-45b6-a5f8-7eccb27d5c07",
            "5cbcc0e1-e9e1-4807-bcb5-a92598d358f7",
            "815fbcf7-70ae-41fe-ab2d-9e528e11d610"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1878,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0689b6dd-a76a-42cc-ac21-092f68e474c5",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.spec.js",
      "file": "cypress/e2e/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d0d35ec-5cd6-49db-a4f7-e3ca96d002b8",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 633,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "4673c245-4ad4-4178-9fbc-2c38597827e1",
              "parentUUID": "4d0d35ec-5cd6-49db-a4f7-e3ca96d002b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 605,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "66e798e2-2609-4c36-a563-bb7b29dd52b4",
              "parentUUID": "4d0d35ec-5cd6-49db-a4f7-e3ca96d002b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 468,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "852c0464-343e-4090-89be-223a2a678a05",
              "parentUUID": "4d0d35ec-5cd6-49db-a4f7-e3ca96d002b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2be584d2-3a61-4b34-b7ae-d95f39077b4a",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 1040,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "74c94571-1475-4f9a-a629-de6a0259a1a1",
                  "parentUUID": "2be584d2-3a61-4b34-b7ae-d95f39077b4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 494,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "40e11816-c4b1-4a7c-923f-72541f03f6d8",
                  "parentUUID": "2be584d2-3a61-4b34-b7ae-d95f39077b4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 551,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "464e4fd3-6c6a-4392-8b8c-814c9320d5a4",
                  "parentUUID": "2be584d2-3a61-4b34-b7ae-d95f39077b4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74c94571-1475-4f9a-a629-de6a0259a1a1",
                "40e11816-c4b1-4a7c-923f-72541f03f6d8",
                "464e4fd3-6c6a-4392-8b8c-814c9320d5a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2085,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "4673c245-4ad4-4178-9fbc-2c38597827e1",
            "66e798e2-2609-4c36-a563-bb7b29dd52b4",
            "852c0464-343e-4090-89be-223a2a678a05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1706,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b978388e-22fb-465f-8941-fe5f8c7cf540",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/Selenium_practise.js",
      "file": "cypress/e2e/sample_testcases/Selenium_practise.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "951537ef-c036-4fb2-a12c-c0c175a7ea70",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 3568,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://rahulshettyacademy.com/seleniumPractise/#/\");\ncy.wait(200);\ncy.get('div.products div.product').each(($el, index, $list) => {\n  const headervalue = $el.find('h4').text();\n  cy.log(' Name: ' + headervalue);\n  if (headervalue.includes('Brocolli - 1 Kg')) {\n    cy.wrap($el).find('button').click();\n  }\n});\ncy.get('a.cart-icon').click();\ncy.contains('PROCEED TO CHECKOUT').click();\ncy.contains('Place Order').click();",
              "err": {},
              "uuid": "761fc202-2249-4544-b534-a7dd74ed2a94",
              "parentUUID": "951537ef-c036-4fb2-a12c-c0c175a7ea70",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "761fc202-2249-4544-b534-a7dd74ed2a94"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3568,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fc2476b7-dc04-4a38-8624-e2fb85174769",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/alert.js",
      "file": "cypress/e2e/sample_testcases/alert.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "da6feeb2-8ffc-4455-9b74-dd0746e45c47",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 8877,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('#alertbtn').click();\ncy.get('#confirmbtn').click(); //window alert \ncy.on('window:alert', str => {\n  expect(str).to.equal('Hello , share this practice page and share your knowledge');\n});\ncy.on('window:confirm', str => {\n  expect(str).to.equal(\"Hello , Are you sure you want to confirm?\");\n}); //tab using cypress\ncy.get('a[id=\"opentab\"]').invoke('removeAttr', 'target').click();\ncy.url().should('include', 'rahulshettyacademy');\ncy.go('back');",
              "err": {},
              "uuid": "19528d94-85c2-4dc1-855f-b5f57b2d0d1c",
              "parentUUID": "da6feeb2-8ffc-4455-9b74-dd0746e45c47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19528d94-85c2-4dc1-855f-b5f57b2d0d1c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8877,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cc67627b-11ea-4aa4-8787-0fc77fa625d0",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/checkbox_radio.js",
      "file": "cypress/e2e/sample_testcases/checkbox_radio.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12a888aa-3502-424b-a10a-fb550512f822",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 6300,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('#checkBoxOption1').check().should('be.checked').and('have.value', 'option1');\ncy.get('#checkBoxOption1').uncheck().should('not.be.checked');\ncy.get(\"div[id='checkbox-example'] input[type='checkbox']\").check(['option2', 'option3']); //radio button property \ncy.get('input[value=\"radio2\"]').check().should('be.checked').and('have.value', 'radio2');",
              "err": {},
              "uuid": "67e39546-f730-4fde-a8cd-aa79508a1aa1",
              "parentUUID": "12a888aa-3502-424b-a10a-fb550512f822",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67e39546-f730-4fde-a8cd-aa79508a1aa1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6300,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "eb1a5247-db16-482f-945b-43dd2fcc0882",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/cypress_site.js",
      "file": "cypress/e2e/sample_testcases/cypress_site.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "89f84abb-6c40-4202-892f-7bd337e1bef0",
          "title": "My First Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "finds the content \"type\"",
              "fullTitle": "My First Test finds the content \"type\"",
              "timedOut": null,
              "duration": 2059,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io');\ncy.contains('type').click();\ncy.url().should('include', '/commands/actions');\ncy.get('#email1').type('fake@email.com').should('have.value', 'fake@email.com');",
              "err": {},
              "uuid": "ed6198dc-91a0-448b-a182-b646307d8f32",
              "parentUUID": "89f84abb-6c40-4202-892f-7bd337e1bef0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed6198dc-91a0-448b-a182-b646307d8f32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2059,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "add2198f-8d4e-4e40-8b35-58c4d1cc3996",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/dropdown.js",
      "file": "cypress/e2e/sample_testcases/dropdown.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a42359a3-9bbc-4829-8044-feb4bc383c38",
          "title": "Drodown Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "static dropdown",
              "fullTitle": "Drodown Test static dropdown",
              "timedOut": null,
              "duration": 6746,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('select[name=\"dropdown-class-example\"]').select('option2').should('have.value', 'option2');\ncy.get('input[id=\"autocomplete\"]').type('ind');\ncy.get('li.ui-menu-item').each(($el, index, $list) => {\n  const headervalue = $el.find('div').text();\n  cy.log('find dropdown item::-->' + headervalue);\n  if ($el.text() === \"India\") {\n    cy.wrap($el).click();\n  }\n}); //validation if selected value should  be appear or not \ncy.get('input[id=\"autocomplete\"]').should('have.value', 'India'); //hide & show objects\ncy.get('#displayed-text').should('be.visible');\ncy.get('#hide-textbox').click();\ncy.get('#displayed-text').should('not.be.visible');\ncy.get('#show-textbox').click();\ncy.get('#displayed-text').should('be.visible');",
              "err": {},
              "uuid": "fb3d5f75-55e8-49c2-aa9a-b7b709e39438",
              "parentUUID": "a42359a3-9bbc-4829-8044-feb4bc383c38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb3d5f75-55e8-49c2-aa9a-b7b709e39438"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6746,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a226c2f6-b498-49c0-80b3-29a7c65796e5",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/handling_webtable.js",
      "file": "cypress/e2e/sample_testcases/handling_webtable.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1fec758e-a8dd-426c-9588-0e0aba1dc41a",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 5279,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get(\"table[name='courses'] tr td:nth-child(2)\").each(($el, index, $list) => {\n  const coursevalue = $el.text();\n  cy.log(' Name: ' + coursevalue);\n  if (coursevalue.includes(\"Software Testing + Bugzilla + SQL + Agile\")) {\n    cy.get(\"table[name='courses'] tr td:nth-child(2)\").eq(index).next().then(function (price) {\n      const pricevalue = price.text();\n      cy.log(' pricevalue: ' + pricevalue);\n      expect(pricevalue).to.equal('25');\n    });\n  }\n});",
              "err": {},
              "uuid": "eb7448a1-ab62-41d6-85d2-8367c08192f4",
              "parentUUID": "1fec758e-a8dd-426c-9588-0e0aba1dc41a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb7448a1-ab62-41d6-85d2-8367c08192f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5279,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "530e8a0c-8369-43b7-84f9-5d4c1c40c254",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/mousehover.js",
      "file": "cypress/e2e/sample_testcases/mousehover.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1695792-53d0-49fe-b29a-c49eb72fd94f",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 7275,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('div[class=\"mouse-hover\"] div[class=\"mouse-hover-content\"]').invoke('show'); //cy.contains('Top').click({force: true})\ncy.get('a[href=\"#top\"]').click();\ncy.url().should('include', 'top'); //how to handle window  // button[id=\"openwindow\"]\n//a[id=\"opentab\"]\ncy.get('a[id=\"opentab\"]').then(function (el) {\n  const url = el.prop('href');\n  cy.log('url :>' + url);\n  cy.visit(url);\n});",
              "err": {},
              "uuid": "7e096d19-67d3-4675-92b6-bc3b288e6bd8",
              "parentUUID": "e1695792-53d0-49fe-b29a-c49eb72fd94f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e096d19-67d3-4675-92b6-bc3b288e6bd8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e9e960fb-4059-4ab0-9ce6-ff7c9f28a3f0",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/naykafashion.js",
      "file": "cypress/e2e/sample_testcases/naykafashion.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1d80e8ab-13b5-4993-8377-b7d9e6455d51",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 8010,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.nykaafashion.com/\");\ncy.wait(200); //alias create in cypress\ncy.get(\"div[class='css-1xh7gv9'] a:visible\").as('menulocator');\ncy.get('@menulocator').should('have.length', '6');\ncy.get('@menulocator').eq(1).contains('Men'); //log method to print output  with then method \ncy.wait(2000);\ncy.get(\"div[class='css-r5u4mn'] span\").then(function (ele) {\n  cy.log('banner textName' + ele.text()).should('have.text', 'Download the Nykaa Fashion app and get ₹150 off*. Use code: NF150');\n});\ncy.get('@menulocator').each(($el, index, $list) => {\n  const headervalue = $el.find(\"span\").text();\n  cy.log(' Name: ' + headervalue);\n  if (headervalue.includes('Men')) {\n    cy.wrap($el).find('span').click();\n  }\n});\n/*\ncy.get('button[class=\"cp-header  css-1skuidv\"] div').each(($el, index, $list) => {\n     const headervalue = $el.text()\n   cy.log(' Name: ' + headervalue)\n   if (headervalue.includes('Watches')) {\n      cy.wrap($el).click()\n   }\n})*/",
              "err": {},
              "uuid": "7a55d364-2985-41d8-8d52-57d4dacbeb66",
              "parentUUID": "1d80e8ab-13b5-4993-8377-b7d9e6455d51",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a55d364-2985-41d8-8d52-57d4dacbeb66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8010,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b3e4de2b-35fb-43e4-8607-ac27b1393585",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/Selenium_practise.js",
      "file": "cypress/e2e/sample_testcases/Selenium_practise.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "64421528-9d66-4415-b059-1f9459729230",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 5300,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://rahulshettyacademy.com/seleniumPractise/#/\");\ncy.wait(200);\ncy.get('div.products div.product').each(($el, index, $list) => {\n  const headervalue = $el.find('h4').text();\n  cy.log(' Name: ' + headervalue);\n  if (headervalue.includes('Brocolli - 1 Kg')) {\n    cy.wrap($el).find('button').click();\n  }\n});\ncy.get('a.cart-icon').click();\ncy.contains('PROCEED TO CHECKOUT').click();\ncy.contains('Place Order').click();",
              "err": {},
              "uuid": "569fc960-c959-46b9-8002-e2af8f8a5033",
              "parentUUID": "64421528-9d66-4415-b059-1f9459729230",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "569fc960-c959-46b9-8002-e2af8f8a5033"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5300,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f7198104-0575-463a-8fe8-888a640e4803",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/alert.js",
      "file": "cypress/e2e/sample_testcases/alert.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7195bed4-7901-442b-a973-79cc481f6a02",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 9777,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('#alertbtn').click();\ncy.get('#confirmbtn').click(); //window alert \ncy.on('window:alert', str => {\n  expect(str).to.equal('Hello , share this practice page and share your knowledge');\n});\ncy.on('window:confirm', str => {\n  expect(str).to.equal(\"Hello , Are you sure you want to confirm?\");\n}); //tab using cypress\ncy.get('a[id=\"opentab\"]').invoke('removeAttr', 'target').click();\ncy.url().should('include', 'rahulshettyacademy');\ncy.go('back');",
              "err": {},
              "uuid": "527b61b4-e05d-4cd1-896a-7003f8ab5a33",
              "parentUUID": "7195bed4-7901-442b-a973-79cc481f6a02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "527b61b4-e05d-4cd1-896a-7003f8ab5a33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9777,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7252da59-9bbf-4482-9ef7-4d0adcb6580b",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/checkbox_radio.js",
      "file": "cypress/e2e/sample_testcases/checkbox_radio.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6527bbc9-b9c8-499b-afae-f97ee837e8ae",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 12325,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768); // cy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.visit(\"https://www.rahulshettyacademy.com/\");\ncy.wait(200);\ncy.get('#checkBoxOption1').check().should('be.checked').and('have.value', 'option1');\ncy.get('#checkBoxOption1').uncheck().should('not.be.checked');\ncy.get(\"div[id='checkbox-example'] input[type='checkbox']\").check(['option2', 'option3']); //radio button property \ncy.get('input[value=\"radio2\"]').check().should('be.checked').and('have.value', 'radio2');",
              "err": {
                "message": "AssertionError: Timed out retrying after 8000ms: Expected to find element: `#checkBoxOption1`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 8000ms: Expected to find element: `#checkBoxOption1`, but never found it.\n    at Context.eval (https://www.rahulshettyacademy.com/__cypress/tests?p=cypress/e2e/sample_testcases/checkbox_radio.js:108:8)",
                "diff": null
              },
              "uuid": "e44eff0c-674a-4196-a8d8-ff3538a8861f",
              "parentUUID": "6527bbc9-b9c8-499b-afae-f97ee837e8ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e44eff0c-674a-4196-a8d8-ff3538a8861f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12325,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "13f4c68f-291d-48eb-90b9-94be58990c40",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/cypress_site.js",
      "file": "cypress/e2e/sample_testcases/cypress_site.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "355963a5-5482-4884-a714-21952f9ced05",
          "title": "My First Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "finds the content \"type\"",
              "fullTitle": "My First Test finds the content \"type\"",
              "timedOut": null,
              "duration": 2277,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io');\ncy.contains('type').click();\ncy.url().should('include', '/commands/actions');\ncy.get('#email1').type('fake@email.com').should('have.value', 'fake@email.com');",
              "err": {},
              "uuid": "2838c421-c605-4658-bb5c-5e76dada5896",
              "parentUUID": "355963a5-5482-4884-a714-21952f9ced05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2838c421-c605-4658-bb5c-5e76dada5896"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2277,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "acce7315-5f87-442b-9eca-6affe491227f",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/dropdown.js",
      "file": "cypress/e2e/sample_testcases/dropdown.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7c22d1ef-dc57-44c7-9c71-90c68c26a446",
          "title": "Drodown Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "static dropdown",
              "fullTitle": "Drodown Test static dropdown",
              "timedOut": null,
              "duration": 7241,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('select[name=\"dropdown-class-example\"]').select('option2').should('have.value', 'option2');\ncy.get('input[id=\"autocomplete\"]').type('ind');\ncy.get('li.ui-menu-item').each(($el, index, $list) => {\n  const headervalue = $el.find('div').text();\n  cy.log('find dropdown item::-->' + headervalue);\n  if ($el.text() === \"India\") {\n    cy.wrap($el).click();\n  }\n}); //validation if selected value should  be appear or not \ncy.get('input[id=\"autocomplete\"]').should('have.value', 'India'); //hide & show objects\ncy.get('#displayed-text').should('be.visible');\ncy.get('#hide-textbox').click();\ncy.get('#displayed-text').should('not.be.visible');\ncy.get('#show-textbox').click();\ncy.get('#displayed-text').should('be.visible');",
              "err": {},
              "uuid": "0781cab2-33d1-4d27-bd17-1bd1d00890da",
              "parentUUID": "7c22d1ef-dc57-44c7-9c71-90c68c26a446",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0781cab2-33d1-4d27-bd17-1bd1d00890da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7241,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "48166c2c-58d9-4e2e-ab1a-4c5a503ad4c5",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/handling_webtable.js",
      "file": "cypress/e2e/sample_testcases/handling_webtable.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e6939aaa-ea8c-4abf-af8e-cd058fabf981",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 6064,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get(\"table[name='courses'] tr td:nth-child(2)\").each(($el, index, $list) => {\n  const coursevalue = $el.text();\n  cy.log(' Name: ' + coursevalue);\n  if (coursevalue.includes(\"Software Testing + Bugzilla + SQL + Agile\")) {\n    cy.get(\"table[name='courses'] tr td:nth-child(2)\").eq(index).next().then(function (price) {\n      const pricevalue = price.text();\n      cy.log(' pricevalue: ' + pricevalue);\n      expect(pricevalue).to.equal('25');\n    });\n  }\n});",
              "err": {},
              "uuid": "dba2e327-c48a-4a12-bc48-666ff3e101f6",
              "parentUUID": "e6939aaa-ea8c-4abf-af8e-cd058fabf981",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dba2e327-c48a-4a12-bc48-666ff3e101f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6064,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d753fcc7-06a3-42e5-8677-69989dbee196",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/mousehover.js",
      "file": "cypress/e2e/sample_testcases/mousehover.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd05d8a4-b528-46de-b7b6-eb5bca2bb8c3",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 7207,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.rahulshettyacademy.com/AutomationPractice/\");\ncy.wait(200);\ncy.get('div[class=\"mouse-hover\"] div[class=\"mouse-hover-content\"]').invoke('show'); //cy.contains('Top').click({force: true})\ncy.get('a[href=\"#top\"]').click();\ncy.url().should('include', 'top'); //how to handle window  // button[id=\"openwindow\"]\n//a[id=\"opentab\"]\ncy.get('a[id=\"opentab\"]').then(function (el) {\n  const url = el.prop('href');\n  cy.log('url :>' + url);\n  cy.visit(url);\n});",
              "err": {},
              "uuid": "303b3815-efa3-4c75-91ec-7b4c7ee9dd7d",
              "parentUUID": "dd05d8a4-b528-46de-b7b6-eb5bca2bb8c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "303b3815-efa3-4c75-91ec-7b4c7ee9dd7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7207,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5bfd5ea3-ec2f-4f0d-9323-62dca3473ab0",
      "title": "",
      "fullFile": "cypress/e2e/sample_testcases/naykafashion.js",
      "file": "cypress/e2e/sample_testcases/naykafashion.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dea7f829-54b5-4590-8cfb-8861c78e3f52",
          "title": "Tutorialspoint Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario 1",
              "fullTitle": "Tutorialspoint Test Scenario 1",
              "timedOut": null,
              "duration": 7354,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// test step for URL launching\ncy.viewport(1366, 768);\ncy.visit(\"https://www.nykaafashion.com/\");\ncy.wait(200); //alias create in cypress\ncy.get(\"div[class='css-1xh7gv9'] a:visible\").as('menulocator');\ncy.get('@menulocator').should('have.length', '6');\ncy.get('@menulocator').eq(1).contains('Men'); //log method to print output  with then method \ncy.wait(2000);\ncy.get(\"div[class='css-r5u4mn'] span\").then(function (ele) {\n  cy.log('banner textName' + ele.text()).should('have.text', 'Download the Nykaa Fashion app and get ₹150 off*. Use code: NF150');\n});\ncy.get('@menulocator').each(($el, index, $list) => {\n  const headervalue = $el.find(\"span\").text();\n  cy.log(' Name: ' + headervalue);\n  if (headervalue.includes('Men')) {\n    cy.wrap($el).find('span').click();\n  }\n});\n/*\ncy.get('button[class=\"cp-header  css-1skuidv\"] div').each(($el, index, $list) => {\n     const headervalue = $el.text()\n   cy.log(' Name: ' + headervalue)\n   if (headervalue.includes('Watches')) {\n      cy.wrap($el).click()\n   }\n})*/",
              "err": {},
              "uuid": "4249f67a-89fb-48b0-a872-6382a1339bed",
              "parentUUID": "dea7f829-54b5-4590-8cfb-8861c78e3f52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4249f67a-89fb-48b0-a872-6382a1339bed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7354,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "report",
        "overwrite": false,
        "html": true,
        "json": true,
        "charts": true
      },
      "version": "6.2.0"
    }
  }
}